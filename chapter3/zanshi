#include <stdio.h>
#include <stdlib.h>
#include <malloc.h>
#include "TreeMe.h"

SearchTree MakeEmpty(SearchTree T){
    if(T != NULL){
        MakeEmpty(T->Left);
        MakeEmpty(T->Right);
        free(T);
    }
    return NULL;
}

Position Find(ElementType X, SearchTree T){
    if(T == NULL)
        return NULL;
    if(X < T->Element)
        return Find(X, T->Left);  //要找的值在左子树
    else if(X > T->Element)
        return Find(X, T->Right);//要找的值在右子树
    else
        return T;  //T就是要找的值
}

Position FindMin(SearchTree T){
    if(T == NULL)
        return NULL;
    if(T->Left == NULL)
        return T;
    else
        return FindMin(T->Left);
}

Position FindMax(SearchTree T){
    if(T != NULL)
        while(T->Right != NULL)
            T = T->Right;
    return T;
}


SearchTree Insert(ElementType X, SearchTree T){
    if(T == NULL){
        T = malloc(sizeof(struct TreeNode));
        if(T == NULL){
            printf("out of space!");
        }
        else{
            T->Element = X;
            T->Left = T->Right = NULL;
        }
    }
    else if(X < T->Element)
        T->Left = Insert(X, T->Left);
    else if(X > T->Element)
        T->Right = Insert(X, T->Right);
    return T;
}

SearchTree Delete(ElementType X, SearchTree T){
    Position TmpCell;
    if(T == NULL)
        printf("No Element Found!");
    else if(X < T->Element)
        T->Left = Delete(X, T->Left);
    else if(X > T->Element)
        T->Right = Delete(X, T->Right);
    else if()
}
